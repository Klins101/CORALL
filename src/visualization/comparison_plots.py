import numpy as np
import matplotlib.pyplot as plt
from typing import List, Dict, Any
import os

def plot_kdir_comparison(time_baseline: List[float], 
                        kdir_baseline: np.ndarray,
                        time_llm: List[float], 
                        kdir_llm: np.ndarray,
                        case_number: int,
                        output_dir: str = 'img/',
                        llm_provider: str = 'LLM') -> str:
    """
    Create a clean comparison plot of Kdir values between baseline and LLM simulations.
    
    Args:
        time_baseline: Time array for baseline simulation
        kdir_baseline: Kdir values for baseline simulation
        time_llm: Time array for LLM simulation
        kdir_llm: Kdir values for LLM simulation
        case_number: Simulation case number
        output_dir: Output directory for plots
        llm_provider: Name of LLM provider used
    
    Returns:
        str: Path to saved plot file
    """
    
    # Create single clean figure
    plt.figure(figsize=(14, 8))
    
    # Plot Kdir comparison with beautiful styling
    plt.plot(time_baseline, kdir_baseline, 'b-', linewidth=3, label='Simulation (Baseline)', alpha=0.8)
    plt.plot(time_llm, kdir_llm, 'r-', linewidth=3, label=f'LLM ({llm_provider})', alpha=0.8)
    
    # Add horizontal reference lines
    plt.axhline(y=0, color='gray', linestyle='--', alpha=0.6, linewidth=2)
    plt.axhline(y=1, color='green', linestyle=':', alpha=0.6, linewidth=1)
    plt.axhline(y=-1, color='orange', linestyle=':', alpha=0.6, linewidth=1)
    
    # Styling
    plt.xlabel('Time (seconds)', fontsize=16, fontweight='bold')
    plt.ylabel('Kdir (Turn Direction)', fontsize=16, fontweight='bold')
    plt.title(f'Navigation Decisions Comparison - Case {case_number}', fontsize=18, fontweight='bold', pad=20)
    
    # Beautiful legend
    plt.legend(loc='upper right', fontsize=14, frameon=True, fancybox=True, shadow=True)
    
    # Grid and styling
    plt.grid(True, alpha=0.3, linewidth=0.5)
    plt.ylim(-1.2, 1.2)
    
    # Add direction labels on the right side
    plt.text(1.02, 1, 'Starboard\n(Right Turn)', transform=plt.gca().transAxes, 
            verticalalignment='center', fontsize=12, fontweight='bold', color='green')
    plt.text(1.02, 0.5, 'No Turn\n(Straight)', transform=plt.gca().transAxes, 
            verticalalignment='center', fontsize=12, fontweight='bold', color='gray')
    plt.text(1.02, 0, 'Port\n(Left Turn)', transform=plt.gca().transAxes, 
            verticalalignment='center', fontsize=12, fontweight='bold', color='orange')
    
    # Set y-axis ticks
    plt.yticks([-1, 0, 1], ['âˆ’1 (Port)', '0 (Straight)', '+1 (Starboard)'], fontsize=12)
    plt.xticks(fontsize=12)
    
    # Tight layout
    plt.tight_layout()
    
    # Save plot
    filename = f'kdir_comparison_{llm_provider.lower()}_case_{case_number}.png'
    filepath = os.path.join(output_dir, filename)
    plt.savefig(filepath, dpi=300, bbox_inches='tight', facecolor='white')
    
    # Also save as EPS
    eps_filename = f'kdir_comparison_{llm_provider.lower()}_case_{case_number}.eps'
    eps_filepath = os.path.join(output_dir, eps_filename)
    plt.savefig(eps_filepath, format='eps', bbox_inches='tight', facecolor='white')
    
    plt.show()
    
    return filepath


def create_comparison_summary(baseline_stats: Dict[str, Any], 
                            llm_stats: Dict[str, Any],
                            case_number: int,
                            output_dir: str = 'img/',
                            llm_provider: str = 'LLM') -> str:
    """
    Create a summary comparison report.
    """
    
    summary_text = f"""
# Simulation Comparison Report - Case {case_number}

## Configuration
- **LLM Provider**: {llm_provider}
- **Case Number**: {case_number}
- **Simulation Time**: {baseline_stats.get('sim_time', 'N/A')} seconds

## Navigation Behavior Comparison

### Turn Commands (Kdir)
- **Baseline Total Turns**: {baseline_stats.get('total_turns', 'N/A')}
- **{llm_provider} Total Turns**: {llm_stats.get('total_turns', 'N/A')}
- **Turn Agreement Rate**: {baseline_stats.get('turn_agreement', 'N/A')}

### Risk Management
- **Baseline Max Risk**: {baseline_stats.get('max_risk', 'N/A'):.3f}
- **{llm_provider} Max Risk**: {llm_stats.get('max_risk', 'N/A'):.3f}
- **Baseline Avg Risk**: {baseline_stats.get('avg_risk', 'N/A'):.3f}
- **{llm_provider} Avg Risk**: {llm_stats.get('avg_risk', 'N/A'):.3f}

### Performance Metrics
- **Baseline Final Distance**: {baseline_stats.get('final_distance', 'N/A'):.2f} nm
- **{llm_provider} Final Distance**: {llm_stats.get('final_distance', 'N/A'):.2f} nm
- **Path Efficiency Difference**: {baseline_stats.get('path_efficiency_diff', 'N/A'):.1f}%

## Analysis
{baseline_stats.get('analysis', 'Analysis not available')}

---
Generated by Marine Vessel Simulation System
"""
    
    # Save summary
    filename = f'comparison_summary_{llm_provider.lower()}_case_{case_number}.txt'
    filepath = os.path.join(output_dir, filename)
    
    with open(filepath, 'w') as f:
        f.write(summary_text)
    
    return filepath